#define F_CPU 16000000UL  // Define CPU frequency as 16 MHz for delay functions
#include <avr/io.h>       // Include AVR input/output definitions
#include <util/delay.h>   // Include delay utility
#include "LCD.h"          // Include custom LCD header file

// Function to display duty cycle percentage and status ("UP"/"DOWN") on LCD
void displayDutyCycle(int duty, char *status)
{
	int percentage = (duty * 100) / 255;  // Convert duty cycle value (0-255) to percentage (0-100)

	LCD_Command(0xC4);  // Move cursor to column 5 of the second line (0xC0 base)
	LCD_String(status);  // Display motor status string (e.g., "UP  ", "DOWN")

	LCD_Command(0xC9);  // Move cursor to column 10 of the second line
	LCD_Char((percentage / 10) + '0');  // Display tens digit of percentage
	LCD_Char((percentage % 10) + '0');  // Display ones digit of percentage
	LCD_Char('%'); // Display percentage symbol
}

// Function to control motor direction and duty cycle ramping
void motorControl(int direction)
{
	int i;

	// Swapped Motor Direction Labels
	if (direction == 1)
	{
		PORTB &= ~(1 << PB4);  // Clear PB4 to set motor in reverse direction (logically called Forward here)
		LCD_Command(0xC0);     // Move cursor to beginning of second line
		LCD_String("REV ");    // Display "REV" on LCD (logically called Forward here)
	}
	else
	{
		PORTB |= (1 << PB4);   // Set PB4 to drive motor in forward direction (logically called Reverse here)
		LCD_Command(0xC0);     // Move cursor to beginning of second line
		LCD_String("FWD ");    // Display "FWD" on LCD (logically called Reverse here)
	}

	// Gradually increase duty cycle from 0 to 255 in steps of 25
	for (i = 0; i <= 255; i += 25)
	{
		OCR0 = i;  // Set PWM duty cycle (8-bit)
		displayDutyCycle(i, "UP  ");  // Show increasing duty cycle status
		_delay_ms(1000);  // Delay 1 second between steps
	}

	// Gradually decrease duty cycle from 255 to 0 in steps of 25
	for (i = 255; i >= 0; i -= 25)
	{
		OCR0 = i;  // Set PWM duty cycle
		displayDutyCycle(i, "DOWN");  // Show decreasing duty cycle status
		_delay_ms(1000);  // Delay 1 second between steps
	}
}

int main()
{
	DDRB |= (1 << PB3) | (1 << PB4);  // Set PB3 (OC0 - PWM output) and PB4 as output
	TCCR0 = 0xE3;  // Configure Timer0: Fast PWM mode, non-inverted, prescaler = 64

	LCD_Init();  // Initialize LCD
	LCD_Command(0x80);    // Move cursor to beginning of first line
	LCD_String("abc");  // Display author's name

	while(1)  // Infinite loop
	{
		motorControl(1); // Call motor control in "Forward" direction (label is swapped)
		_delay_ms(1000); // Wait for a second

		motorControl(0); // Call motor control in "Reverse" direction (label is swapped)
		_delay_ms(1000); // Wait for a second
	}
}
