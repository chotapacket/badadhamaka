SW EQU P1.0       ; Define SW (Switch) at Port 1.0
		RELAY EQU P1.1    ; Define RELAY at Port 1.1
		BUZ EQU P1.2      ; Define BUZ (Buzzer) at Port 1.2
		LED EQU P0        ; Define LED at Port 0

		ORG 0000H         ; Start at memory location 0000H

		SETB SW           ; Set SW as an input (pull-up enabled)

START:  
		JB SW, CASE1  ; If SW (P1.0) is high, jump to CASE1
		SJMP CASE2    ; Otherwise, jump to CASE2

CASE1:  
		SETB RELAY    ; Turn ON the relay
		SETB BUZ      ; Turn ON the buzzer
		MOV LED, #0FFH ; Turn ON all LEDs (binary 11111111)
		ACALL DELAY   ; Call delay subroutine
		MOV LED, #00H  ; Turn OFF all LEDs (binary 00000000)
		ACALL DELAY   ; Call delay subroutine
		SJMP START    ; Repeat the process

CASE2:  
		CLR RELAY     ; Turn OFF the relay
		CLR BUZ       ; Turn OFF the buzzer
		MOV LED, #0AAH ; Set LED pattern 10101010
		ACALL DELAY   ; Call delay subroutine
		MOV LED, #055H ; Set LED pattern 01010101
		ACALL DELAY   ; Call delay subroutine
		SJMP START    ; Repeat the process

  
DELAY:     mov R0,#07
           L1: mov R1,#255
           L2: mov R2,#255
           L3: djnz R2 , L3
           djnz R1 , L2
           djnz R0 , L1
	   ret

		END               ; End of program	


/* Each DJNZ instruction takes 2 machine cycles.
One machine cycle = 1 / (11.0592 MHz / 12) = 1.085 µs
R2 loop: 255 × 2 cycles = 510 cycles

R1 loop: 255 × 510 = 130,050 cycles

R0 loop: 7 × 130,050 = 910,350 cycles

Add some overhead (for MOV instructions and RET): let’s say ~50 cycles extra.

So total ~ 910,400 cycles
Time per cycle = 1.085 µs

Total time = 910,400 × 1.085 µs = 989,784 µs ˜0.99 sec
*/	
